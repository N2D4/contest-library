/* Generated by Generificator on Thu Dec 19 21:12:38 CET 2019 from ExtendedStream.java */

package lib.generated;

import java.util.function.*;
import lib.generated.*;
import lib.utils.various.*;

import lib.generated.DoubleExtendedStream;
import lib.generated.IntExtendedStream;
import lib.generated.LongExtendedStream;
import lib.utils.Arr;

import java.util.*;
import java.util.function.*;
import java.util.stream.*;


public interface IntExtendedStream extends IntStream {

    @Override IntExtendedStream filter(IntPredicate predicate);
    
    @Override IntExtendedStream map(IntUnaryOperator mapper);
    @Override <U> ExtendedStream<U> mapToObj(IntFunction<? extends U> mapper);
    @Override ExtendedStream<Integer> boxed();
    
    /*IS-Int int*/
    @Override DoubleExtendedStream asDoubleStream();
    @Override LongExtendedStream asLongStream();
    /*ELSE./
    @Override IntExtendedStream mapToInt(IntUnaryOperator mapper);
    /.END*/
    /*IS-Long T./
    @Override DoubleExtendedStream asDoubleStream();
    /.ELSE*/
    @Override LongExtendedStream mapToLong(IntToLongFunction mapper);
    /*END*/
    /*IS-Double T./
    /.ELSE*/
    @Override DoubleExtendedStream mapToDouble(IntToDoubleFunction mapper);
    /*END*/
    
    @Override IntExtendedStream flatMap(IntFunction<? extends IntStream> mapper);
    
    @Override IntExtendedStream distinct();
    @Override IntExtendedStream sorted();
    
    
    @Override IntExtendedStream peek(IntConsumer action);
    @Override IntExtendedStream limit(long maxSize);
    @Override IntExtendedStream skip(long n);
    @Override void forEach(IntConsumer action);
    @Override void forEachOrdered(IntConsumer action);
    @Override int[] toArray();
    
    
    @Override int reduce(int identity, IntBinaryOperator accumulator);
    @Override OptionalInt reduce(IntBinaryOperator accumulator);
    
    
    @Override <R> R collect(Supplier<R> supplier, ObjIntConsumer<R> accumulator, BiConsumer<R, R> combiner);
    
    
    
    @Override OptionalInt min();
    @Override OptionalInt max();
    
    @Override long count();
    @Override boolean anyMatch(IntPredicate predicate);
    @Override boolean allMatch(IntPredicate predicate);
    @Override boolean noneMatch(IntPredicate predicate);
    @Override OptionalInt findFirst();
    @Override OptionalInt findAny();
    
    @Override PrimitiveIterator.OfInt iterator();
    @Override Spliterator.OfInt spliterator();
    
    @Override boolean isParallel();
    @Override IntExtendedStream sequential();
    @Override IntExtendedStream parallel();
    @Override IntExtendedStream unordered();
    @Override IntExtendedStream onClose(Runnable closeHandler);
    @Override void close();
    
    @Override int sum();
    @Override OptionalDouble average();
    @Override IntSummaryStatistics summaryStatistics();
    

    /**
     * Returns a parallel stream if parallel is true, or sequential if it's not.
     */
    default IntExtendedStream setParallel(boolean parallel) {
        if (parallel) {
            return parallel();
        } else {
            return sequential();
        }
    }


    /**
     * Returns this stream. Can be used to ensure that this stream is of type ExtendedStream at compile-time (useful for
     * code generators).
     */
    default IntExtendedStream ensureExtended() {
        return this;
    }


    static   IntExtendedStream ofStream(IntStream stream) {
        if (stream instanceof IntExtendedStream) return (IntExtendedStream) stream;
        return ofLazyStream(() -> stream, stream.isParallel());
    }

    static   IntExtendedStream ofLazyStream(Lazy<? extends IntStream> stream, boolean parallel) {
        return new IntExtendedStreamImpl(stream, parallel);
    }
}
