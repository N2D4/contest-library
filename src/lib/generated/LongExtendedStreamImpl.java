/* Generated by Generificator on Tue Dec 03 22:33:01 CET 2019 from ExtendedStreamImpl.java */

package lib.generated;

import java.util.function.*;
import lib.generated.*;
import lib.utils.various.*;

import lib.generated.DoubleExtendedStream;
import lib.generated.IntExtendedStream;
import lib.generated.LongExtendedStream;
import lib.utils.Arr;
import lib.utils.function.Cons;
import lib.utils.function.Func;

import java.util.*;
import java.util.function.*;
import java.util.stream.*;


class LongExtendedStreamImpl implements LongExtendedStream {
    private final Lazy<LongStream> lazyStream;

    LongExtendedStreamImpl(Lazy<LongStream> lazyStream) {
        this.lazyStream = lazyStream;
    }



    private LongStream portStream(LongStream stream, LongStream from) {
        return stream.onClose(from::close);
    }

    private LongExtendedStream arrOpF(Func<long[], long[]> func) {
        return c(s -> {
            long[] arr = s.toArray();
            arr = func.apply(arr);
            return portStream((LongStream) Arr.stream(arr), s);
        });
    }

    private LongExtendedStream arrOpC(Cons<long[]> func) {
        return arrOpF(a -> {
            func.accept(a);
            return a;
        });
    }

    private Lazy<IntStream> li(Func<LongStream, IntStream> func) {
        return () -> func.apply(lazyStream.get());
    }

    private Lazy<LongStream> ll(Func<LongStream, LongStream> func) {
        return () -> func.apply(lazyStream.get());
    }

    private Lazy<DoubleStream> ld(Func<LongStream, DoubleStream> func) {
        return () -> func.apply(lazyStream.get());
    }

    private <U> Lazy<Stream<U>> lo(Func<LongStream, Stream<U>> func) {
        return () -> func.apply(lazyStream.get());
    }

    
    private Lazy<LongStream> l(Func<LongStream, LongStream> func) {
        return () -> func.apply(lazyStream.get());
    }

    private LongExtendedStreamImpl c(Func<LongStream, LongStream> func) {
        return new LongExtendedStreamImpl(l(func));
    }
    

    private LongStream s() {
        return lazyStream.get();
    }





    @Override
    public LongExtendedStream filter(LongPredicate predicate) {
        return c(s -> s.filter(predicate));
    }

    
    @Override
    public LongExtendedStream map(LongUnaryOperator mapper) {
        return c(s -> s.map(mapper));
    }

    @Override
    public <U> ExtendedStream<U> mapToObj(LongFunction<? extends U> mapper) {
        return ExtendedStream.ofLazyStream(lo(s -> s.mapToObj(mapper)));
    }

    @Override
    public ExtendedStream<Long> boxed() {
        return ExtendedStream.ofLazyStream(lo(s -> s.boxed()));
    }
    

    /*IS-Int T./
    @Override
    public DoubleExtendedStream asDoubleStream() {
        return DoubleExtendedStream.ofLazyStream(ld(s -> s.asDoubleStream()));
    }

    @Override
    public LongExtendedStream asLongStream() {
        return LongExtendedStream.ofLazyStream(ll(s -> s.asLongStream()));
    }
    /.ELSE*/
    @Override
    public IntExtendedStream mapToInt(LongToIntFunction mapper) {
        return IntExtendedStream.ofLazyStream(li(s -> s.mapToInt(mapper)));
    }
    /*END*/

    /*IS-Long long*/
    @Override
    public DoubleExtendedStream asDoubleStream() {
        return DoubleExtendedStream.ofLazyStream(ld(s -> s.asDoubleStream()));
    }
    /*ELSE./
    @Override
    public LongExtendedStream mapToLong(LongUnaryOperator mapper) {
        return LongExtendedStream.ofLazyStream(ll(s -> s.mapToLong(mapper)));
    }
    /.END*/

    /*IS-Double T./
    /.ELSE*/
    @Override
    public DoubleExtendedStream mapToDouble(LongToDoubleFunction mapper) {
        return DoubleExtendedStream.ofLazyStream(ld(s -> s.mapToDouble(mapper)));
    }
    /*END*/

    
    @Override
    public LongExtendedStream flatMap(LongFunction<? extends LongStream> mapper) {
        return c(s -> s.flatMap(mapper));
    }
    

    @Override
    public LongExtendedStream distinct() {
        return c(LongStream::distinct);
    }

    @Override
    public LongExtendedStream sorted() {
        return arrOpC(Arr::sort);
    }

    
    

    @Override
    public LongExtendedStream peek(LongConsumer action) {
        return c(s -> s.peek(action));
    }

    @Override
    public LongExtendedStream limit(long maxSize) {
        return c(s -> s.limit(maxSize));
    }

    @Override
    public LongExtendedStream skip(long n) {
        return c(s -> s.skip(n));
    }

    @Override
    public void forEach(LongConsumer action) {
        s().forEach(action);
    }

    @Override
    public void forEachOrdered(LongConsumer action) {
        s().forEachOrdered(action);
    }

    @Override
    public long[] toArray() {
        return s().toArray();
    }

    
    

    @Override
    public long reduce(long identity, LongBinaryOperator accumulator) {
        return s().reduce(identity, accumulator);
    }

    @Override
    public OptionalLong reduce(LongBinaryOperator accumulator) {
        return s().reduce(accumulator);
    }

    
    

    @Override
    public <R> R collect(Supplier<R> supplier, ObjLongConsumer<R> accumulator, BiConsumer<R, R> combiner) {
        return s().collect(supplier, accumulator, combiner);
    }

    
    

    
    @Override
    public OptionalLong min() {
        return s().min();
    }

    @Override
    public OptionalLong max() {
        return s().max();
    }
    

    @Override
    public long count() {
        return s().count();
    }

    @Override
    public boolean anyMatch(LongPredicate predicate) {
        return s().anyMatch(predicate);
    }

    @Override
    public boolean allMatch(LongPredicate predicate) {
        return s().allMatch(predicate);
    }

    @Override
    public boolean noneMatch(LongPredicate predicate) {
        return s().noneMatch(predicate);
    }

    @Override
    public OptionalLong findFirst() {
        return s().findFirst();
    }

    @Override
    public OptionalLong findAny() {
        return s().findAny();
    }

    
    @Override
    public PrimitiveIterator.OfLong iterator() {
        return s().iterator();
    }

    @Override
    public Spliterator.OfLong spliterator() {
        return s().spliterator();
    }
    

    @Override
    public boolean isParallel() {
        return s().isParallel();
    }

    @Override
    public LongExtendedStream sequential() {
        return c(LongStream::sequential);
    }

    @Override
    public LongExtendedStream parallel() {
        return c(LongStream::parallel);
    }

    @Override
    public LongExtendedStream unordered() {
        return c(LongStream::unordered);
    }

    @Override
    public LongExtendedStream onClose(Runnable closeHandler) {
        return c(s -> s.onClose(closeHandler));
    }

    @Override
    public void close() {
        s().close();
    }

    
    @Override
    public long sum() {
        return 0;
    }

    @Override
    public OptionalDouble average() {
        return s().average();
    }

    @Override
    public LongSummaryStatistics summaryStatistics() {
        return s().summaryStatistics();
    }
    
}
