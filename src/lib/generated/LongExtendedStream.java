/* Generated by Generificator on Thu Dec 19 21:12:38 CET 2019 from ExtendedStream.java */

package lib.generated;

import java.util.function.*;
import lib.generated.*;
import lib.utils.various.*;

import lib.generated.DoubleExtendedStream;
import lib.generated.IntExtendedStream;
import lib.generated.LongExtendedStream;
import lib.utils.Arr;

import java.util.*;
import java.util.function.*;
import java.util.stream.*;


public interface LongExtendedStream extends LongStream {

    @Override LongExtendedStream filter(LongPredicate predicate);
    
    @Override LongExtendedStream map(LongUnaryOperator mapper);
    @Override <U> ExtendedStream<U> mapToObj(LongFunction<? extends U> mapper);
    @Override ExtendedStream<Long> boxed();
    
    /*IS-Int T./
    @Override DoubleExtendedStream asDoubleStream();
    @Override LongExtendedStream asLongStream();
    /.ELSE*/
    @Override IntExtendedStream mapToInt(LongToIntFunction mapper);
    /*END*/
    /*IS-Long long*/
    @Override DoubleExtendedStream asDoubleStream();
    /*ELSE./
    @Override LongExtendedStream mapToLong(LongUnaryOperator mapper);
    /.END*/
    /*IS-Double T./
    /.ELSE*/
    @Override DoubleExtendedStream mapToDouble(LongToDoubleFunction mapper);
    /*END*/
    
    @Override LongExtendedStream flatMap(LongFunction<? extends LongStream> mapper);
    
    @Override LongExtendedStream distinct();
    @Override LongExtendedStream sorted();
    
    
    @Override LongExtendedStream peek(LongConsumer action);
    @Override LongExtendedStream limit(long maxSize);
    @Override LongExtendedStream skip(long n);
    @Override void forEach(LongConsumer action);
    @Override void forEachOrdered(LongConsumer action);
    @Override long[] toArray();
    
    
    @Override long reduce(long identity, LongBinaryOperator accumulator);
    @Override OptionalLong reduce(LongBinaryOperator accumulator);
    
    
    @Override <R> R collect(Supplier<R> supplier, ObjLongConsumer<R> accumulator, BiConsumer<R, R> combiner);
    
    
    
    @Override OptionalLong min();
    @Override OptionalLong max();
    
    @Override long count();
    @Override boolean anyMatch(LongPredicate predicate);
    @Override boolean allMatch(LongPredicate predicate);
    @Override boolean noneMatch(LongPredicate predicate);
    @Override OptionalLong findFirst();
    @Override OptionalLong findAny();
    
    @Override PrimitiveIterator.OfLong iterator();
    @Override Spliterator.OfLong spliterator();
    
    @Override boolean isParallel();
    @Override LongExtendedStream sequential();
    @Override LongExtendedStream parallel();
    @Override LongExtendedStream unordered();
    @Override LongExtendedStream onClose(Runnable closeHandler);
    @Override void close();
    
    @Override long sum();
    @Override OptionalDouble average();
    @Override LongSummaryStatistics summaryStatistics();
    

    /**
     * Returns a parallel stream if parallel is true, or sequential if it's not.
     */
    default LongExtendedStream setParallel(boolean parallel) {
        if (parallel) {
            return parallel();
        } else {
            return sequential();
        }
    }


    /**
     * Returns this stream. Can be used to ensure that this stream is of type ExtendedStream at compile-time (useful for
     * code generators).
     */
    default LongExtendedStream ensureExtended() {
        return this;
    }


    static   LongExtendedStream ofStream(LongStream stream) {
        if (stream instanceof LongExtendedStream) return (LongExtendedStream) stream;
        return ofLazyStream(() -> stream, stream.isParallel());
    }

    static   LongExtendedStream ofLazyStream(Lazy<? extends LongStream> stream, boolean parallel) {
        return new LongExtendedStreamImpl(stream, parallel);
    }
}
