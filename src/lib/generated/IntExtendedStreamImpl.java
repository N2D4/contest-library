/* Generated by Generificator from ExtendedStreamImpl.java */

package lib.generated;

import java.util.function.*;
import lib.generated.*;
import lib.utils.various.*;

import lib.generated.*;
import lib.utils.Arr;
import lib.utils.function.Cons;
import lib.utils.function.Func;

import java.util.*;
import java.util.function.*;
import java.util.stream.*;


class IntExtendedStreamImpl implements IntExtendedStream {
    private final Lazy<? extends Spliterator.OfInt> lazySpliterator;
    private boolean isStreamParallel;
    private Runnable closeHandler;

    IntExtendedStreamImpl(Lazy<? extends Spliterator.OfInt> lazySpliterator, boolean isParallel) {
        this.lazySpliterator = lazySpliterator;
        this.isStreamParallel = isParallel;
        this.closeHandler = () -> {};
    }


    private static IntStream normieStream(Spliterator.OfInt spliterator, boolean isParallel) {
        return StreamSupport.intStream(spliterator, isParallel);
    }

    private static LongStream normieStream(Spliterator.OfLong spliterator, boolean isParallel) {
        return StreamSupport.longStream(spliterator, isParallel);
    }

    private static DoubleStream normieStream(Spliterator.OfDouble spliterator, boolean isParallel) {
        return StreamSupport.doubleStream(spliterator, isParallel);
    }

    private static <U> Stream<U> normieStream(Spliterator<U> spliterator, boolean isParallel) {
        return StreamSupport.stream(spliterator, isParallel);
    }


    private IntExtendedStream ofLazyIntegerSpliterator(Lazy<Spliterator.OfInt> spliterator) {
        Runnable closeHandler = this.closeHandler;
        IntExtendedStream stream = IntExtendedStream.ofLazySpliterator(spliterator, isParallel()).onClose(closeHandler);
        this.closeHandler = stream::close;
        return stream;
    }

    private LongExtendedStream ofLazyLongSpliterator(Lazy<Spliterator.OfLong> spliterator) {
        Runnable closeHandler = this.closeHandler;
        LongExtendedStream stream = LongExtendedStream.ofLazySpliterator(spliterator, isParallel()).onClose(closeHandler);
        this.closeHandler = stream::close;
        return stream;
    }

    private DoubleExtendedStream ofLazyDoubleSpliterator(Lazy<Spliterator.OfDouble> spliterator) {
        Runnable closeHandler = this.closeHandler;
        DoubleExtendedStream stream = DoubleExtendedStream.ofLazySpliterator(spliterator, isParallel()).onClose(closeHandler);
        this.closeHandler = stream::close;
        return stream;
    }

    private <U> ExtendedStream<U> ofLazyObjectSpliterator(Lazy<Spliterator<U>> spliterator) {
        Runnable closeHandler = this.closeHandler;
        ExtendedStream<U> stream = ExtendedStream.ofLazySpliterator(spliterator, isParallel()).onClose(closeHandler);
        this.closeHandler = stream::close;
        return stream;
    }


    private IntExtendedStream arrOpF(Func<int[], int[]> serial, Func<int[], int[]> parallel, IntIntFunc characteristics) {
        return l(orig -> {
            boolean isParallel = isParallel();
            int charas = orig.characteristics();

            int[] arr = normieStream(orig, isParallel).toArray();
            arr = (isParallel ? parallel : serial).apply(arr);

            Spliterator.OfInt spliterator = Spliterators.spliterator(arr, Spliterator.ORDERED | Spliterator.IMMUTABLE | characteristics.apply(charas));
            return spliterator;
        });
    }

    private IntExtendedStream arrOpC(Cons<int[]> serial, Cons<int[]> parallel, IntIntFunc characteristics) {
        return arrOpF(a -> {
            serial.accept(a);
            return a;
        }, a -> {
            parallel.accept(a);
            return a;
        }, characteristics);
    }

    private IntExtendedStream li(Func<Spliterator.OfInt, Spliterator.OfInt> func) {
        return ofLazyIntegerSpliterator(() -> func.apply(lazySpliterator.get()));
    }

    private LongExtendedStream ll(Func<Spliterator.OfInt, Spliterator.OfLong> func) {
        return ofLazyLongSpliterator(() -> func.apply(lazySpliterator.get()));
    }

    private DoubleExtendedStream ld(Func<Spliterator.OfInt, Spliterator.OfDouble> func) {
        return ofLazyDoubleSpliterator(() -> func.apply(lazySpliterator.get()));
    }

    private <U> ExtendedStream<U> lo(Func<Spliterator.OfInt, Spliterator<U>> func) {
        return ofLazyObjectSpliterator(() -> func.apply(lazySpliterator.get()));
    }

    /**
     * Helper function for intermediate stream operations.
     */
    private IntExtendedStream ci(Func<IntStream, IntStream> func) {
        return li(s -> func.apply(normieStream(s, isParallel())).spliterator());
    }

    /**
     * Helper function for intermediate stream operations.
     */
    private LongExtendedStream cl(Func<IntStream, LongStream> func) {
        return ll(s -> func.apply(normieStream(s, isParallel())).spliterator());
    }

    /**
     * Helper function for intermediate stream operations.
     */
    private DoubleExtendedStream cd(Func<IntStream, DoubleStream> func) {
        return ld(s -> func.apply(normieStream(s, isParallel())).spliterator());
    }

    /**
     * Helper function for intermediate stream operations.
     */
    private <U> ExtendedStream<U> co(Func<IntStream, Stream<U>> func) {
        return lo(s -> func.apply(normieStream(s, isParallel())).spliterator());
    }

    
    private IntExtendedStream l(Func<Spliterator.OfInt, Spliterator.OfInt> func) {
        return ofLazyIntegerSpliterator(() -> func.apply(lazySpliterator.get()));
    }

    private IntExtendedStream c(Func<IntStream, IntStream> func) {
        return l(s -> func.apply(normieStream(s, isParallel())).spliterator());
    }
    

    /**
     * Helper function for terminal stream operations.
     */
    private IntStream s() {
        return normieStream(lazySpliterator.get(), isParallel());
    }





    @Override
    public IntExtendedStream filter(IntPredicate predicate) {
        return c(s -> s.filter(predicate));
    }

    
    @Override
    public IntExtendedStream map(IntUnaryOperator mapper) {
        return c(s -> s.map(mapper));
    }

    @Override
    public <U> ExtendedStream<U> mapToObj(IntFunction<? extends U> mapper) {
        return co((s -> s.mapToObj(mapper)));
    }

    @Override
    public ExtendedStream<Integer> boxed() {
        return co((s -> s.boxed()));
    }
    

    /*IS-Int int*/
    @Override
    public DoubleExtendedStream asDoubleStream() {
        return cd((s -> s.asDoubleStream()));
    }

    @Override
    public LongExtendedStream asLongStream() {
        return cl((s -> s.asLongStream()));
    }
    /*ELSE./
    @Override
    public IntExtendedStream mapToInt(IntUnaryOperator mapper) {
        return ci(s -> s.mapToInt(mapper));
    }
    /.END*/

    /*IS-Long T./
    @Override
    public DoubleExtendedStream asDoubleStream() {
        return cd((s -> s.asDoubleStream()));
    }
    /.ELSE*/
    @Override
    public LongExtendedStream mapToLong(IntToLongFunction mapper) {
        return cl(s -> s.mapToLong(mapper));
    }
    /*END*/

    /*IS-Double T./
    /.ELSE*/
    @Override
    public DoubleExtendedStream mapToDouble(IntToDoubleFunction mapper) {
        return cd(s -> s.mapToDouble(mapper));
    }
    /*END*/

    
    @Override
    public IntExtendedStream flatMap(IntFunction<? extends IntStream> mapper) {
        return c(s -> s.flatMap(mapper));
    }
    

    @Override
    public IntExtendedStream distinct() {
        return c(IntStream::distinct);
    }

    
    @Override
    public IntExtendedStream sorted() {
        return arrOpC(Arr::sort, Arr::parallelSort, c -> c | Spliterator.SORTED);
    }
    

    @Override
    public IntExtendedStream peek(IntConsumer action) {
        return c(s -> s.peek(action));
    }

    @Override
    public IntExtendedStream limit(long maxSize) {
        return c(s -> s.limit(maxSize));
    }

    @Override
    public IntExtendedStream skip(long n) {
        return c(s -> s.skip(n));
    }

    @Override
    public void forEach(IntConsumer action) {
        s().forEach(action);
    }

    @Override
    public void forEachOrdered(IntConsumer action) {
        s().forEachOrdered(action);
    }

    @Override
    public int[] toArray() {
        return s().toArray();
    }

    
    

    @Override
    public int reduce(int identity, IntBinaryOperator accumulator) {
        return s().reduce(identity, accumulator);
    }

    @Override
    public OptionalInt reduce(IntBinaryOperator accumulator) {
        return s().reduce(accumulator);
    }

    
    

    @Override
    public <R> R collect(Supplier<R> supplier, ObjIntConsumer<R> accumulator, BiConsumer<R, R> combiner) {
        return s().collect(supplier, accumulator, combiner);
    }

    
    

    
    @Override
    public OptionalInt min() {
        return s().min();
    }

    @Override
    public OptionalInt max() {
        return s().max();
    }
    

    @Override
    public long count() {
        return s().count();
    }

    @Override
    public boolean anyMatch(IntPredicate predicate) {
        return s().anyMatch(predicate);
    }

    @Override
    public boolean allMatch(IntPredicate predicate) {
        return s().allMatch(predicate);
    }

    @Override
    public boolean noneMatch(IntPredicate predicate) {
        return s().noneMatch(predicate);
    }

    @Override
    public OptionalInt findFirst() {
        return s().findFirst();
    }

    @Override
    public OptionalInt findAny() {
        return s().findAny();
    }

    
    @Override
    public PrimitiveIterator.OfInt iterator() {
        return s().iterator();
    }

    @Override
    public Spliterator.OfInt spliterator() {
        return s().spliterator();
    }
    

    @Override
    public boolean isParallel() {
        return isStreamParallel;
    }

    @Override
    public IntExtendedStream sequential() {
        this.isStreamParallel = false;
        return this;
    }

    @Override
    public IntExtendedStream parallel() {
        this.isStreamParallel = true;
        return this;
    }

    @Override
    public IntExtendedStream unordered() {
        return c(IntStream::unordered);
    }

    @Override
    public IntExtendedStream onClose(Runnable closeHandler) {
        this.closeHandler = () -> {
            this.closeHandler.run();
            closeHandler.run();
        };
        return this;
    }

    @Override
    public void close() {
        closeHandler.run();
        closeHandler = null;
    }

    
    @Override
    public int sum() {
        return s().sum();
    }

    @Override
    public OptionalDouble average() {
        return s().average();
    }

    @Override
    public IntSummaryStatistics summaryStatistics() {
        return s().summaryStatistics();
    }
    
}
