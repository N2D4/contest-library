/* Generated by Generificator on Thu Dec 19 21:12:38 CET 2019 from ExtendedStreamImpl.java */

package lib.generated;

import java.util.function.*;
import lib.generated.*;
import lib.utils.various.*;

import lib.generated.DoubleExtendedStream;
import lib.generated.IntExtendedStream;
import lib.generated.IntIntFunc;
import lib.generated.LongExtendedStream;
import lib.utils.Arr;
import lib.utils.Utils;
import lib.utils.function.Cons;
import lib.utils.function.Func;

import java.util.*;
import java.util.function.*;
import java.util.stream.*;


class IntExtendedStreamImpl implements IntExtendedStream {
    private final Lazy<? extends IntStream> lazyStream;
    private final boolean isStreamParallel;

    IntExtendedStreamImpl(Lazy<? extends IntStream> lazyStream, boolean isParallel) {
        this.lazyStream = lazyStream;
        this.isStreamParallel = isParallel;
    }



    private IntStream portStream(IntStream stream, IntStream from, boolean isParallel) {
        IntStream res = stream.onClose(from::close);
        res = isParallel ? res.parallel() : res.sequential();
        return res;
    }

    private IntExtendedStream arrOpF(Func<int[], int[]> serial, Func<int[], int[]> parallel, IntIntFunc characteristics) {
        return c(s -> {
            boolean isParallel = s.isParallel();
            Spliterator.OfInt orig = s.spliterator();
            int charas = orig.characteristics();
            int[] arr = Utils.stream(orig).toArray();
            arr = (isParallel ? parallel : serial).apply(arr);
            Spliterator.OfInt spliterator = Spliterators.spliterator(arr, Spliterator.ORDERED | Spliterator.IMMUTABLE | characteristics.apply(charas));
            return portStream(Utils.stream(spliterator), s, isParallel);
        });
    }

    private IntExtendedStream arrOpC(Cons<int[]> serial, Cons<int[]> parallel, IntIntFunc characteristics) {
        return arrOpF(a -> {
            serial.accept(a);
            return a;
        }, a -> {
            parallel.accept(a);
            return a;
        }, characteristics);
    }

    private IntStream getAndUpPort() {
        IntStream b = lazyStream.get();
        if (isParallel()) {
            return b.parallel();
        } else {
            return b.sequential();
        }
    }

    private Lazy<IntStream> li(Func<IntStream, IntStream> func) {
        return () -> func.apply(getAndUpPort());
    }

    private Lazy<LongStream> ll(Func<IntStream, LongStream> func) {
        return () -> func.apply(getAndUpPort());
    }

    private Lazy<DoubleStream> ld(Func<IntStream, DoubleStream> func) {
        return () -> func.apply(getAndUpPort());
    }

    private <U> Lazy<Stream<U>> lo(Func<IntStream, Stream<U>> func) {
        return () -> func.apply(getAndUpPort());
    }

    
    private Lazy<IntStream> l(Func<IntStream, IntStream> func) {
        return () -> func.apply(getAndUpPort());
    }

    private IntExtendedStreamImpl c(Func<IntStream, IntStream> func) {
        return c(func, isParallel());
    }

    private IntExtendedStreamImpl c(Func<IntStream, IntStream> func, boolean isParallel) {
        return new IntExtendedStreamImpl(l(func), isParallel);
    }
    

    private IntStream s() {
        return getAndUpPort();
    }





    @Override
    public IntExtendedStream filter(IntPredicate predicate) {
        return c(s -> s.filter(predicate));
    }

    
    @Override
    public IntExtendedStream map(IntUnaryOperator mapper) {
        return c(s -> s.map(mapper));
    }

    @Override
    public <U> ExtendedStream<U> mapToObj(IntFunction<? extends U> mapper) {
        return ExtendedStream.ofLazyStream(lo(s -> s.mapToObj(mapper)), isParallel());
    }

    @Override
    public ExtendedStream<Integer> boxed() {
        return ExtendedStream.ofLazyStream(lo(s -> s.boxed()), isParallel());
    }
    

    /*IS-Int int*/
    @Override
    public DoubleExtendedStream asDoubleStream() {
        return DoubleExtendedStream.ofLazyStream(ld(s -> s.asDoubleStream()), isParallel());
    }

    @Override
    public LongExtendedStream asLongStream() {
        return LongExtendedStream.ofLazyStream(ll(s -> s.asLongStream()), isParallel());
    }
    /*ELSE./
    @Override
    public IntExtendedStream mapToInt(IntUnaryOperator mapper) {
        return IntExtendedStream.ofLazyStream(li(s -> s.mapToInt(mapper)), isParallel());
    }
    /.END*/

    /*IS-Long T./
    @Override
    public DoubleExtendedStream asDoubleStream() {
        return DoubleExtendedStream.ofLazyStream(ld(s -> s.asDoubleStream()), isParallel());
    }
    /.ELSE*/
    @Override
    public LongExtendedStream mapToLong(IntToLongFunction mapper) {
        return LongExtendedStream.ofLazyStream(ll(s -> s.mapToLong(mapper)), isParallel());
    }
    /*END*/

    /*IS-Double T./
    /.ELSE*/
    @Override
    public DoubleExtendedStream mapToDouble(IntToDoubleFunction mapper) {
        return DoubleExtendedStream.ofLazyStream(ld(s -> s.mapToDouble(mapper)), isParallel());
    }
    /*END*/

    
    @Override
    public IntExtendedStream flatMap(IntFunction<? extends IntStream> mapper) {
        return c(s -> s.flatMap(mapper));
    }
    

    @Override
    public IntExtendedStream distinct() {
        return c(IntStream::distinct);
    }

    
    @Override
    public IntExtendedStream sorted() {
        return arrOpC(Arr::sort, Arr::parallelSort, c -> c | Spliterator.SORTED);
    }
    

    @Override
    public IntExtendedStream peek(IntConsumer action) {
        return c(s -> s.peek(action));
    }

    @Override
    public IntExtendedStream limit(long maxSize) {
        return c(s -> s.limit(maxSize));
    }

    @Override
    public IntExtendedStream skip(long n) {
        return c(s -> s.skip(n));
    }

    @Override
    public void forEach(IntConsumer action) {
        s().forEach(action);
    }

    @Override
    public void forEachOrdered(IntConsumer action) {
        s().forEachOrdered(action);
    }

    @Override
    public int[] toArray() {
        return s().toArray();
    }

    
    

    @Override
    public int reduce(int identity, IntBinaryOperator accumulator) {
        return s().reduce(identity, accumulator);
    }

    @Override
    public OptionalInt reduce(IntBinaryOperator accumulator) {
        return s().reduce(accumulator);
    }

    
    

    @Override
    public <R> R collect(Supplier<R> supplier, ObjIntConsumer<R> accumulator, BiConsumer<R, R> combiner) {
        return s().collect(supplier, accumulator, combiner);
    }

    
    

    
    @Override
    public OptionalInt min() {
        return s().min();
    }

    @Override
    public OptionalInt max() {
        return s().max();
    }
    

    @Override
    public long count() {
        return s().count();
    }

    @Override
    public boolean anyMatch(IntPredicate predicate) {
        return s().anyMatch(predicate);
    }

    @Override
    public boolean allMatch(IntPredicate predicate) {
        return s().allMatch(predicate);
    }

    @Override
    public boolean noneMatch(IntPredicate predicate) {
        return s().noneMatch(predicate);
    }

    @Override
    public OptionalInt findFirst() {
        return s().findFirst();
    }

    @Override
    public OptionalInt findAny() {
        return s().findAny();
    }

    
    @Override
    public PrimitiveIterator.OfInt iterator() {
        return s().iterator();
    }

    @Override
    public Spliterator.OfInt spliterator() {
        return s().spliterator();
    }
    

    @Override
    public boolean isParallel() {
        return isStreamParallel;
    }

    @Override
    public IntExtendedStream sequential() {
        return c(a -> a, false);
    }

    @Override
    public IntExtendedStream parallel() {
        return c(a -> a, true);
    }

    @Override
    public IntExtendedStream unordered() {
        return c(IntStream::unordered);
    }

    @Override
    public IntExtendedStream onClose(Runnable closeHandler) {
        return c(s -> s.onClose(closeHandler));
    }

    @Override
    public void close() {
        s().close();
    }

    
    @Override
    public int sum() {
        return s().sum();
    }

    @Override
    public OptionalDouble average() {
        return s().average();
    }

    @Override
    public IntSummaryStatistics summaryStatistics() {
        return s().summaryStatistics();
    }
    
}
